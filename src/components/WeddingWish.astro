---
import { Image } from "astro:assets";
import ornament1 from "@assets/dekorasi/ornamen-1.png";
import ornament5 from "@assets/dekorasi/ornamen-7.webp";
import ornamentBg from "@assets/dekorasi/bg-main-3.jpg";
import DualHeading from "@components/DualHeading.astro";
import { getAllUcapan } from "@lib/data";

const { namaTamu } = Astro.props;

// Get existing ucapan/wishes for display
const ucapanResult = await getAllUcapan();
const ucapanList = ucapanResult.success ? ucapanResult.data : [];
---

<section class="relative h-full w-full overflow-hidden py-12">
  <div class="absolute inset-0 w-full h-full">
    <Image
      loading={"eager"}
      src={ornamentBg}
      alt="ornament top"
      class="h-full w-full object-cover object-center"
    />
  </div>

  <!-- <div class="absolute -top-16 -left-6 lg:w-1/3 md:w-1/2 w-11/12">
    <Image src={ornamentBg} alt="ornament top left" class="-rotate-20" />
  </div>
  <div class="absolute -top-4 -right-2 lg:w-1/6 md:w-1/4 w-1/3">
    <Image src={ornament1} alt="ornament top right" class="rotate-180" />
  </div>
  <div
    class="absolute lg:-bottom-32 -bottom-16 -right-4 lg:w-1/2 md:w-1/2 w-11/12"
  >
    <Image src={ornamentBg} alt="ornament bottom right" class="rotate-160" />
  </div>
  <div class="absolute bottom-4 lg:bottom-16 -left-6 lg:w-1/6 md:w-1/4 w-1/3">
    <Image src={ornament5} alt="ornament b0ttom left" class="rotate-45" />
  </div> -->

  <div class="relative max-w-6xl mx-auto h-full flex flex-col items-center">
    <div class="mx-auto md:w-1/6 w-1/3">
      <Image src={ornament5} alt="ornamen blue flower" />
    </div>
    <DualHeading word1="Wedding" word2="Wish" wordBg="WISH" />
    <div class="px-4 lg:w-auto sm:w-1/2 mb-4 space-y-4 mt-4">
      <div class="space-y-4">
        <p class="text-base mx-auto max-w-md text-center">
          Kirimkan doa restu dan ucapan anda kepada kedua mempelai
        </p>

        <div
          id="responseWish"
          class="invisible text-center p-2 rounded-md max-w-sm mx-auto text-sm"
        >
        </div>

        <form
          id="ucapanForm"
          class="flex flex-col max-w-sm w-[90%] mx-auto mt-8 space-y-4"
        >
          <input
            type="text"
            name="nama"
            id="namaInput"
            class="mt-1 w-full py-2 px-3 text-sm border-2 bg-gray-100 border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-gray-500 focus:border-gray-500"
            placeholder="Nama"
            value={namaTamu || ""}
            required
          />
          <textarea
            name="ucapan"
            id="ucapanInput"
            class="mt-1 w-full py-2 px-3 text-sm border bg-gray-100 border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-gray-500 focus:border-gray-500"
            placeholder="Ucapan/doa"
            rows="3"
            required></textarea>
          <button
            type="submit"
            id="submitBtn"
            class="bg-coklat-petro hover:cursor-pointer text-white font-semibold px-3 py-1.5 rounded-md w-fit"
          >
            <span>Kirim</span>
            <span id="loadingSpinner" class="hidden">
              <svg
                class="animate-spin h-5 w-5 text-white"
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 24 24"
              >
                <circle
                  class="opacity-25"
                  cx="12"
                  cy="12"
                  r="10"
                  stroke="currentColor"
                  stroke-width="4"></circle>
                <path
                  class="opacity-75"
                  fill="currentColor"
                  d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                ></path>
              </svg>
            </span>
          </button>
        </form>

        <p
          id="commentCount"
          class="text-sm text-coklat-petro font-semibold text-center mb-2"
        >
          {ucapanList?.length} Comments
        </p>
        <div class="px-4">
          <div
            class="mx-auto max-w-lg max-h-96 space-y-3 border border-gray-200 rounded-md py-4 px-2 overflow-scroll"
            id="ucapanContainer"
          >
            {
              ucapanList?.map((item) => (
                <div class="mx-auto space-y-1">
                  <p class="text-blue-jeans font-semibold">{item.tamu.nama}</p>
                  <p class="indent-2">{item.isiUcapan}</p>
                </div>
              ))
            }
          </div>
          <div class="mt-24 px-4">
            <p class="text-center sm:text-base text-sm font-medium">
              Menjadi sebuah kebahagiaan bagi kami apabila Bapak/Ibu/Saudara/i
              berkenan hadir dalam hari bahagia kami.
            </p>
            <p
              class="text-center font-medium text-xl font-playfair-display mt-8"
            >
              Terima Kasih
            </p>
            <p
              class="text-center font-medium text-3xl font-playfair-display mt-2"
            >
              Iin & Husnun
            </p>
          </div>
        </div>
      </div>
    </div>
  </div>

  <slot />
</section>

<script>
  // Client-side form handling
  document.addEventListener("DOMContentLoaded", () => {
    const form = document.getElementById("ucapanForm") as HTMLFormElement;
    const responseWish = document.getElementById("responseWish");
    const ucapanContainer = document.getElementById("ucapanContainer");
    const commentCount = document.getElementById("commentCount");
    const namaInput = document.getElementById("namaInput") as HTMLInputElement;
    const ucapanInput = document.getElementById(
      "ucapanInput"
    ) as HTMLTextAreaElement;
    const submitBtn = document.getElementById("submitBtn") as HTMLButtonElement;
    const loadingSpinner = document.getElementById(
      "loadingSpinner"
    ) as HTMLElement;

    if (form && responseWish && ucapanContainer) {
      form.addEventListener("submit", async (e) => {
        e.preventDefault();

        loadingSpinner.classList.remove("hidden");
        submitBtn.setAttribute("disabled", "true");

        const nama = namaInput.value.trim();
        const isiUcapan = ucapanInput.value.trim();

        if (!nama || !isiUcapan) {
          showMessage("Silakan isi semua form", "error");
          return;
        }

        try {
          const response = await fetch("/api/ucapan", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({ nama, isiUcapan }),
          });

          const result = await response.json();

          if (result.success) {
            hideLoadingSpinner();
            showMessage(
              "Terima kasih telah mengirimkan doa/ucapan!",
              "success"
            );

            // Create and add the new ucapan to UI immediately
            addNewUcapanToUI(nama, isiUcapan);

            // Reset form
            form.reset();
          } else {
            hideLoadingSpinner();
            showMessage(result.error || "Gagal mengirim ucapan", "error");
            // Optional: You could remove the newly added comment if the API call fails
          }
        } catch (error) {
          console.error("Error submitting form:", error);
          showMessage("Terjadi kesalahan, silakan coba lagi", "error");
          // Optional: You could remove the newly added comment if the API call fails
        }
      });
    }

    function hideLoadingSpinner() {
      if (loadingSpinner && submitBtn) {
        loadingSpinner.classList.add("hidden");
        submitBtn.removeAttribute("disabled");
      }
    }

    function addNewUcapanToUI(nama: string, isiUcapan: string) {
      if (ucapanContainer) {
        // Create new ucapan element
        const newUcapanDiv = document.createElement("div");
        newUcapanDiv.className = "mx-auto space-y-1";
        newUcapanDiv.innerHTML = `
          <p class="text-sm text-blue-jeans font-semibold">${nama}</p>
          <p class="text-sm indent-2">${isiUcapan}</p>
        `;

        // Add to top of list with a little animation
        newUcapanDiv.style.opacity = "0";
        newUcapanDiv.style.transition = "opacity 0.5s ease-in";

        // Add to the top of the container
        ucapanContainer.prepend(newUcapanDiv);

        // Scroll to the top of the container to show the new comment
        // ucapanContainer.scrollTop = 0;

        // Trigger animation
        setTimeout(() => {
          newUcapanDiv.style.opacity = "1";
        }, 10);

        // Update comment count
        if (commentCount) {
          const currentCount = parseInt(commentCount.textContent || "0");
          commentCount.textContent = `${currentCount + 1} Comments`;
        }
      }
    }

    function showMessage(message: string, type: "success" | "error") {
      if (responseWish) {
        responseWish.textContent = message;
        responseWish.classList.remove(
          "invisible",
          "bg-green-100",
          "text-green-800",
          "bg-red-100",
          "text-red-800"
        );
        responseWish.classList.add(
          ...(type === "success"
            ? ["bg-green-100", "text-green-800"]
            : ["bg-red-100", "text-red-800"])
        );

        // Show the message
        responseWish.classList.remove("invisible");

        // Hide after 5 seconds
        setTimeout(() => {
          responseWish.classList.add("invisible");
        }, 5000);
      }
    }
  });
</script>
